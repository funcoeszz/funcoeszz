#!/bin/bash
# run - run tests
#
# Usage:
#   ./run zzsenha.sh zzcores.sh   # test zzsenha and zzcores
#   ./run                         # run all tests
#   ./run internet                # run all internet based tests
#   ./run local                   # run all local tests (no internet)
#
# See README.md file for instructions.
# See util/lista.sh for a list of available function groups.

tests_dir=$(dirname "$0")
zz_root=$(cd "$tests_dir"; cd ..; pwd)  # handles absolute and relative
tmp='./run.tmp'
tester='bash clitest'

cd "$tests_dir"

# Download clitest if necessary
$tester -V > /dev/null || {
	make -C .. testador/clitest || {
		printf '%s\n' 'Erro ao instalar o programa testador (clitest)'
		exit 1
	}
}

# Create temporary file with ZZ init in full paths
cat > "$tmp" <<EOF
ZZOFF='' . "$zz_root"/funcoeszz \\
	--cor 0 \\
	--path "$zz_root"/funcoeszz \\
	--dir  "$zz_root"/zz
EOF

case "$1" in
	core | funcoeszz.md)
		# inject $zz_root into the test env
		echo "zz_root=$zz_root" > $tmp

		tests=funcoeszz.md
	;;
	zzdatafmt-doctester.sh)
		tester=doctester
		tests="$@"
	;;
	*)
		# Is $1 a special identifier for a group of functions?
		# Examples: all, internet, local
		function_names=$("$zz_root/util/lista.sh" "$1" 2>/dev/null || true)

		if test -n "$function_names"
		then
			# Ok, we have a list of available functions based on the
			# user argument. Now we need to filter that list to contain
			# only the functions that have actual tests. Also, the
			# resulting list must be filenames (zzfoo.sh), not function
			# names (zzfoo).
			all_test_files=$(ls zz*.sh)  # we're already in the test dir
			tests=$(
				echo "$function_names" |
					sed 's/$/.sh/' |
					grep -F -x -f <(echo "$all_test_files")
			)
		else
			# User argument is unknown. Maybe it contains test
			# filenames. Let's try them directly.
			tests="$@"
		fi
	;;
esac

# Run the tests
# Note: To remove the dots ........ change 'dot' to 'none'
if test "$tester" = doctester
then
	echo "$ source $tmp" > foo
	echo '$' >> foo
	cat $tests >> foo
	$tester foo
	rm foo
else
	$tester --progress dot --pre-flight ". $tmp" $tests
fi
exitcode=$?

rm "$tmp"
exit "$exitcode"
