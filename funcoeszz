#!/usr/bin/env bash
# funcoeszz
#
# INFORMAÇÕES: http://www.funcoeszz.net
# NASCIMENTO : 22 de Fevereiro de 2000
# AUTORES    : Aurelio Marinho Jargas <verde (a) aurelio net>
#              Itamar Santos de Souza <itamarnet (a) yahoo com br>
#              Thobias Salazar Trevisan <thobias (a) thobias org>
# DESCRIÇÃO  : Funções de uso geral para o shell Bash, que buscam
#              informações em arquivos locais e fontes na Internet
# LICENÇA    : GPL-2.0-only
# CHANGELOG  : http://www.funcoeszz.net/changelog.html
#
ZZVERSAO=dev
ZZUTF=1
#
##############################################################################
#
#                                Configuração
#                                ------------
#
#
### Configuração via variáveis de ambiente
#
# Algumas variáveis de ambiente podem ser usadas para alterar o comportamento
# padrão das funções. Basta defini-las em seu .bashrc ou na própria linha de
# comando antes de chamar as funções. São elas:
#
#      $ZZCOR      - Liga/Desliga as mensagens coloridas (1 e 0)
#      $ZZPATH     - Caminho completo para o arquivo principal (funcoeszz)
#      $ZZDIR      - Caminho completo para o diretório com as funções
#      $ZZTMPDIR   - Diretório para armazenar arquivos temporários
#      $ZZOFF      - Lista das funções que você não quer carregar
#
# Nota: Se você é paranóico com segurança, configure a ZZTMPDIR para
#       um diretório dentro do seu HOME.
#
### Configuração fixa neste arquivo (hardcoded)
#
# A configuração também pode ser feita diretamente neste arquivo, se você
# puder fazer alterações nele.
#
ZZCOR_DFT=1                       # colorir mensagens? 1 liga, 0 desliga
ZZPATH_DFT="/usr/bin/funcoeszz"   # rota absoluta deste arquivo
ZZDIR_DFT="$HOME/zz"              # rota absoluta do diretório com as funções
ZZTMPDIR_DFT="${TMPDIR:-/tmp}"    # diretório temporário
#
#
##############################################################################
#
#                               Inicialização
#                               -------------
#
#
# Variáveis auxiliares usadas pelas Funções ZZ.
# Não altere nada aqui.
#
#

### Truques para descobrir a localização deste arquivo no sistema

# 1. Resolução do parâmetro $0:
# https://github.com/aureliojargas/livro-shell/issues/2#issuecomment-830872380

# 1.1. "bash arquivo.sh" vs. "source arquivo.sh" 
# (https://superuser.com/a/176788/42896)

# Quando o arquivo de script é executado com "bash arquivo.sh",
# (ou com "./arquivo.sh", caso tenha permissão de execução),
# o valor do parâmetro $0 é o nome do arquivo.
# (Neste caso é o valor de $ZZPATH que queremos)

# A outra forma de executar o arquivo de script é usando "source arquivo.sh".
# Nesta outra forma, o valor de $0 depende do tipo de shell sendo executado.

# 1.2 login shell vs. non-login shell
# Todo terminal (shell) é do tipo login shell, ou non-login shell.

# O login shell ocorre a cada janela de terminal local aberta,
# ou a cada conexão a um terminal remoto (ssh).
# Neste caso, o valor de $0 é o nome do terminal, com hífen:
# (i.e. "-bash", ou outro tipo de terminal (sh, etc.))
# (detalhes em https://unix.stackexchange.com/a/128983/8632)

# Quaisquer novos terminais abertos nestes terminais inicial são non-login.
# (i.e. chamar "bash" em um prompt, ou "sudo su" etc.)
# Neste caso, o valor de $0 após isto é o nome do terminal, sem hífen:
# (i.e. "bash", etc.)

# Então, precisamos identificar:
# Se o valor de $0 é o nome do terminal,
# ou
# Se o valor de $0 é prefixado por hífen
# (isto só acontece com o nome do terminal,
# por isso não precisamos testar pelo nome do terminal novamente)

# Se o valor for um desses, assumimos que já existe um $ZZPATH configurado.
test "${0##*/}" = 'bash' -o "${0#-}" != "$0" ||
  # Caso contrário, bingo, é o $ZZPATH q queremos
  ZZPATH="$0"
# 2. Se a variável $ZZPATH não foi inicializada, usamos um valor padrão.
test -n "$ZZPATH" || ZZPATH=$ZZPATH_DFT
# 3. Finalmente, força que ZZPATH seja uma rota absoluta.
test "${ZZPATH#/}" = "$ZZPATH" && ZZPATH="$PWD/${ZZPATH#./}"

test -d "${ZZPATH%/*}/zz" && ZZDIR="${ZZPATH%/*}/zz"
test -z "$ZZDIR" && test -d "$ZZDIR_DFT" && ZZDIR=$ZZDIR_DFT

# Descobre qual o navegador em modo texto está disponível no sistema
if test -z "$ZZBROWSER"
then
	for ZZBROWSER in lynx links links2 elinks w3m
	do
		type "$ZZBROWSER" >/dev/null 2>&1 && break
	done
fi
export ZZBROWSER

#
### Últimos ajustes
#
ZZCOR="${ZZCOR:-$ZZCOR_DFT}"
ZZTMP="${ZZTMPDIR:-$ZZTMPDIR_DFT}"
ZZTMP="${ZZTMP%/}/zz"  # prefixo comum a todos os arquivos temporários
ZZAJUDA="$ZZTMP.ajuda"
unset ZZCOR_DFT ZZPATH_DFT ZZDIR_DFT ZZTMPDIR_DFT

#
### Forçar variáveis via linha de comando
#
while test $# -gt 0
do
	case "$1" in
		--path) ZZPATH="$2"   ; shift; shift ;;
		--dir ) ZZDIR="${2%/}"; shift; shift ;;
		--cor ) ZZCOR="$2"    ; shift; shift ;;
		*) break;;
	esac
done


##############################################################################
#
# A linha seguinte é usada pela opção --tudo-em-um
#@


##############################################################################
#
#                             Texto de ajuda
#                             --------------
#
#

# Função temporária para extrair o texto de ajuda do cabeçalho das funções
# Passe o arquivo com as funções como parâmetro
_extrai_ajuda() {
	# Extrai somente os cabeçalhos, já removendo o # do início
	sed -n '/^# -----* *$/,/^# -----* *$/ s/^# \{0,1\}//p' "$1" |
		# Agora remove trechos que não podem aparecer na ajuda
		sed '
			# Apaga a metadata (Autor, Desde, Versao, etc)
			/^Autor:/,/^------/ d

			# Apaga a linha em branco apos Ex.:
			/^Ex\.:/,/^------/ {
				/^ *$/d
			}'
}

# Limpa conteúdo do arquivo de ajuda
> "$ZZAJUDA"

# Salva o texto de ajuda das funções inclusas neste arquivo
# (presentes na versão tudo-em-um)
test -r "$ZZPATH" && _extrai_ajuda "$ZZPATH" >> "$ZZAJUDA"

##############################################################################
#
#                    Carregamento das funções do $ZZDIR
#                    ----------------------------------
#
# O carregamento é feito em dois passos para ficar mais robusto:
# 1. Obtenção da lista completa de funções, ativadas e desativadas.
# 2. Carga de cada função ativada, salvando o texto de ajuda.
#
# Com a opção --tudo-em-um, o passo 2 é alterado para mostrar o conteúdo
# da função em vez de carregá-la.
#

### Passo 1

# Limpa arquivos temporários que guardam as listagens
> "$ZZTMP.on"
> "$ZZTMP.off"

# Lista de funções a desligar: uma por linha, com prefixo zz
zz_off=$(
	echo "$ZZOFF" |
	tr -s '\t ' '\n' |
	sed 's/^zz// ; s/^/zz/'
)

# A pasta das funções existe?
if test -n "$ZZDIR" -a -d "$ZZDIR"
then
	# Primeiro salva a lista de funções disponíveis
	for zz_arquivo in "${ZZDIR%/}"/zz*
	do
		# Só ativa funções que podem ser lidas
		if test -r "$zz_arquivo"
		then
			zz_nome="${zz_arquivo##*/}"  # remove path
			zz_nome="${zz_nome%.sh}"     # remove extensão

			# O usuário desativou esta função?
			echo "$zz_off" | grep "^$zz_nome$" >/dev/null ||
				# Tudo certo, essa vai ser carregada
				echo "$zz_nome"
		fi
	done >> "$ZZTMP.on"

	# Lista das funções desativadas (OFF = Todas - ON)
	(
	cd "$ZZDIR" &&
	ls -1 zz* |
		sed 's/\.sh$//' |
		grep -v -f "$ZZTMP.on"
	) >> "$ZZTMP.off"
fi

# echo ON ; cat "$ZZTMP.on"  | zztool lines2list
# echo OFF; cat "$ZZTMP.off" | zztool lines2list
# exit

### Passo 2

# Vamos juntar todas as funções em um único arquivo?
if test "$1" = '--tudo-em-um'
then
	# Verifica se a pasta das funções existe
	if test -z "$ZZDIR" -o ! -d "$ZZDIR"
	then
		(
		echo "Ops! Não encontrei as funções na pasta '$ZZDIR'."
		echo 'Informe a localização correta na variável $ZZDIR.'
		echo
		echo 'Exemplo: export ZZDIR="$HOME/zz"'
		) >&2
		exit 1
		# Posso usar exit porque a chamada é pelo executável, e não source
	fi

	# Primeira metade deste arquivo, até #@
	sed '/^#@$/q' "$ZZPATH"

	# Mostra cada função (ativa), inserindo seu nome na linha 2 do cabeçalho
	while read -r zz_nome
	do
		zz_arquivo="${ZZDIR%/}"/$zz_nome.sh

		sed 1q "$zz_arquivo"
		echo "# $zz_nome"
		sed 1d "$zz_arquivo"

		# Linha em branco separadora
		# Também garante quebra se faltar \n na última linha da função
		echo
	done < "$ZZTMP.on"

	# Desliga suporte ao diretório de funções
	echo
	echo 'ZZDIR='

	# Segunda metade deste arquivo, depois de #@
	sed '1,/^#@$/d' "$ZZPATH"

	# Tá feito, simbora.
	exit 0
fi

# Carregamento das funções ativas, salvando texto de ajuda
while read -r zz_nome
do
	zz_arquivo="${ZZDIR%/}"/$zz_nome.sh

	# Pula o carregamento dessa função se o arquivo não existir
	test -r "$zz_arquivo" || continue

	# Inclui a função na shell atual
	. "$zz_arquivo"

	# Extrai o texto de ajuda
	_extrai_ajuda "$zz_arquivo" |
		# Insere o nome da função na segunda linha
		sed "2 { h; s/.*/$zz_nome/; G; }"

done < "$ZZTMP.on" >> "$ZZAJUDA"

# Separador final do arquivo, com exatamente 77 hífens (7x11)
echo '-------' | sed 's/.*/&&&&&&&&&&&/' >> "$ZZAJUDA"


# Modo --tudo-em-um
# Todas as funções já foram carregadas por estarem dentro deste arquivo.
# Agora faremos o desligamento "manual" das funções ZZOFF.
#
if test -z "$ZZDIR" -a -n "$zz_off"
then
	# Desliga todas em uma só linha (note que não usei aspas)
	unset $zz_off

	# Agora apaga os textos da ajuda, montando um script em sed e aplicando
	# Veja issue 5 para mais detalhes:
	# https://github.com/funcoeszz/funcoeszz/issues/5
	zz_sed=$(echo "$zz_off" | sed 's@.*@/^&$/,/^----*$/d;@')  # /^zzfoo$/,/^----*$/d
	cp "$ZZAJUDA" "$ZZAJUDA.2" &&
	sed "$zz_sed" "$ZZAJUDA.2" > "$ZZAJUDA"
	rm "$ZZAJUDA.2"
fi


### Carregamento terminado, funções já estão disponíveis

# Limpa variáveis e funções temporárias
# Nota: prefixo zz_ para não conflitar com variáveis da shell atual
unset zz_arquivo
unset zz_nome
unset zz_off
unset zz_sed
unset -f _extrai_ajuda


##----------------------------------------------------------------------------
## Lidando com a chamada pelo executável

# Se há parâmetros, é porque o usuário está nos chamando pela
# linha de comando, e não pelo comando source.
if test -n "$1"
then

	case "$1" in

		# Mostra a tela de ajuda
		-h | --help)

			cat - <<-FIM

				Uso: funcoeszz <função> [<parâmetros>]

				Lista de funções:
				    funcoeszz zzzz
				    funcoeszz zzajuda --lista

				Ajuda:
				    funcoeszz zzajuda
				    funcoeszz zzcores -h
				    funcoeszz zzcalcula -h

				Instalação:
				    funcoeszz zzzz --bashrc
				    source ~/.bashrc
				    zz<TAB><TAB>

				Saiba mais:
				    http://funcoeszz.net

			FIM
			exit 0
		;;

		# Mostra a versão das funções
		-v | --version)
			echo "Funções ZZ v$ZZVERSAO"
			exit 0
		;;

		-*)
			echo "Opção inválida '$1' (tente --help)" >&2
			exit 1
		;;

		# Chama a função informada em $1, caso ela exista
		*)
			zz_func="$1"

			# Garante que a zzzz possa ser chamada por zz somente
			test "$zz_func" = 'zz' && zz_func='zzzz'

			# O prefixo zz é opcional: zzdata e data funcionam
			zz_func="zz${zz_func#zz}"

			# A função existe?
			if type $zz_func >/dev/null 2>&1
			then
				shift
				$zz_func "$@"
				zz_exit_code=$?
			else
				echo "Função inexistente '$zz_func' (tente --help)" >&2
			fi

			unset zz_func
			exit $zz_exit_code
		;;
	esac
fi
